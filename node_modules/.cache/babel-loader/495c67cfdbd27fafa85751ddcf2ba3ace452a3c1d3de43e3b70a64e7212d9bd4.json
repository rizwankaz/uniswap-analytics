{"ast":null,"code":"import React from'react';import{useQuery,gql}from'@apollo/client';import{Container,Typography,Card,CardContent,Stack,CircularProgress}from'@mui/material';import{Line,Bar}from'react-chartjs-2';// Import Bar and Line here\nimport{Chart as ChartJS,LineElement,CategoryScale,LinearScale,PointElement,TimeScale,Tooltip,Legend,BarElement// Import BarElement for Bar chart\n}from'chart.js';import'chartjs-adapter-date-fns';// Register ChartJS components\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(LineElement,CategoryScale,LinearScale,PointElement,TimeScale,Tooltip,Legend,BarElement// Register BarElement for Bar chart\n);// Define the query for recent swaps\nconst SWAP_QUERY=gql`\n  {\n    swaps(first: 10000, orderBy: timestamp, orderDirection: desc) {\n      id\n      amountUSD\n      timestamp\n      token0 {\n        symbol\n      }\n      token1 {\n        symbol\n      }\n    }\n  }\n`;// Define the query for token volume\nconst TOKEN_VOLUME_QUERY=gql`\n  {\n    tokens(first: 5, orderBy: volumeUSD, orderDirection: desc) {\n      id\n      symbol\n      volumeUSD\n    }\n  }\n`;// Define the query for top pairs\nconst TOP_PAIRS_QUERY=gql`\n  {\n    pools(first: 5, orderBy: volumeUSD, orderDirection: desc) {\n      id\n      token0 {\n        symbol\n      }\n      token1 {\n        symbol\n      }\n      volumeUSD\n    }\n  }\n`;function Swaps(){const{loading,error,data}=useQuery(SWAP_QUERY);if(loading)return/*#__PURE__*/_jsx(CircularProgress,{});if(error){console.error('Error fetching data:',error);return/*#__PURE__*/_jsxs(Typography,{color:\"error\",children:[\"Error: \",error.message]});}// Prepare data for aggregation\nconst swaps=data.swaps;// Aggregate every 100 swaps\nconst aggregateData=[];for(let i=0;i<swaps.length;i+=100){const chunk=swaps.slice(i,i+100);const totalAmountUSD=chunk.reduce((sum,swap)=>sum+parseFloat(swap.amountUSD),0);const startTime=new Date(parseInt(chunk[0].timestamp)*1000);const endTime=new Date(parseInt(chunk[chunk.length-1].timestamp)*1000);aggregateData.push({x:startTime,y:totalAmountUSD,label:`${startTime.toLocaleString()} - ${endTime.toLocaleString()}`});}// Prepare aggregated data for chart\nconst chartData={datasets:[{label:'Amount USD (Aggregated Every 100 Swaps)',data:aggregateData,borderColor:'rgba(75,192,192,1)',backgroundColor:'rgba(75,192,192,0.2)',fill:true}]};// Chart options to format time and display a proper range\nconst chartOptions={scales:{x:{type:'time',time:{unit:'minute',tooltipFormat:'Pp',displayFormats:{minute:'HH:mm',hour:'HH:mm',day:'MMM D'}},title:{display:true,text:'Time'}},y:{title:{display:true,text:'Amount USD'},beginAtZero:true}}};// Limit to the 5 latest swaps\nconst latestSwaps=swaps.slice(0,5).map(swap=>({...swap,timestamp:new Date(parseInt(swap.timestamp)*1000).toLocaleString()}));return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,children:\"Recent Swaps\"}),/*#__PURE__*/_jsxs(Stack,{spacing:3,children:[/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Swap Amounts Aggregated Every 100 Swaps\"}),/*#__PURE__*/_jsx(Line,{data:chartData,options:chartOptions})]})}),/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Recent Swap Details\"}),latestSwaps.map(swap=>/*#__PURE__*/_jsx(Card,{sx:{marginBottom:2},children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body1\",children:[swap.token0.symbol,\"/\",swap.token1.symbol,\": \",swap.amountUSD,\" USD\"]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Timestamp: \",swap.timestamp]})]})},swap.id))]})})]})]});}function TokenVolume(){const{loading,error,data}=useQuery(TOKEN_VOLUME_QUERY);if(loading)return/*#__PURE__*/_jsx(CircularProgress,{});if(error){console.error('Error fetching data:',error);return/*#__PURE__*/_jsxs(Typography,{color:\"error\",children:[\"Error: \",error.message]});}// Prepare data for chart\nconst tokens=data.tokens;const chartData={labels:tokens.map(token=>token.symbol),datasets:[{label:'Volume USD',data:tokens.map(token=>parseFloat(token.volumeUSD)),backgroundColor:'rgba(153,102,255,0.2)',borderColor:'rgba(153,102,255,1)',borderWidth:1}]};// Chart options\nconst chartOptions={scales:{y:{beginAtZero:true,title:{display:true,text:'Volume USD'}}}};return/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Top 5 Tokens by Volume\"}),/*#__PURE__*/_jsx(Bar,{data:chartData,options:chartOptions})]})});}function TopPairs(){const{loading,error,data}=useQuery(TOP_PAIRS_QUERY);if(loading)return/*#__PURE__*/_jsx(CircularProgress,{});if(error){console.error('Error fetching data:',error);return/*#__PURE__*/_jsxs(Typography,{color:\"error\",children:[\"Error: \",error.message]});}// Prepare data for chart\nconst pairs=data.pools;const chartData={labels:pairs.map(pair=>`${pair.token0.symbol}/${pair.token1.symbol}`),datasets:[{label:'Volume USD',data:pairs.map(pair=>parseFloat(pair.volumeUSD)),backgroundColor:'rgba(255,159,64,0.2)',borderColor:'rgba(255,159,64,1)',borderWidth:1}]};// Chart options\nconst chartOptions={scales:{y:{beginAtZero:true,title:{display:true,text:'Volume USD'}}}};return/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Top 5 Pairs by Volume\"}),/*#__PURE__*/_jsx(Bar,{data:chartData,options:chartOptions})]})});}function App(){return/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsxs(Stack,{spacing:4,children:[/*#__PURE__*/_jsx(Swaps,{}),/*#__PURE__*/_jsx(TokenVolume,{}),/*#__PURE__*/_jsx(TopPairs,{})]})});}export default App;","map":{"version":3,"names":["React","useQuery","gql","Container","Typography","Card","CardContent","Stack","CircularProgress","Line","Bar","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","TimeScale","Tooltip","Legend","BarElement","jsx","_jsx","jsxs","_jsxs","register","SWAP_QUERY","TOKEN_VOLUME_QUERY","TOP_PAIRS_QUERY","Swaps","loading","error","data","console","color","children","message","swaps","aggregateData","i","length","chunk","slice","totalAmountUSD","reduce","sum","swap","parseFloat","amountUSD","startTime","Date","parseInt","timestamp","endTime","push","x","y","label","toLocaleString","chartData","datasets","borderColor","backgroundColor","fill","chartOptions","scales","type","time","unit","tooltipFormat","displayFormats","minute","hour","day","title","display","text","beginAtZero","latestSwaps","map","variant","gutterBottom","spacing","options","sx","marginBottom","token0","symbol","token1","id","TokenVolume","tokens","labels","token","volumeUSD","borderWidth","TopPairs","pairs","pools","pair","App"],"sources":["/Users/rizwankazi/Documents/uniswap-analytics/src/App.js"],"sourcesContent":["import React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Container, Typography, Card, CardContent, Stack, CircularProgress } from '@mui/material';\nimport { Line, Bar } from 'react-chartjs-2';  // Import Bar and Line here\nimport {\n  Chart as ChartJS,\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  TimeScale,\n  Tooltip,\n  Legend,\n  BarElement,  // Import BarElement for Bar chart\n} from 'chart.js';\nimport 'chartjs-adapter-date-fns';\n\n// Register ChartJS components\nChartJS.register(\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  TimeScale,\n  Tooltip,\n  Legend,\n  BarElement  // Register BarElement for Bar chart\n);\n\n// Define the query for recent swaps\nconst SWAP_QUERY = gql`\n  {\n    swaps(first: 10000, orderBy: timestamp, orderDirection: desc) {\n      id\n      amountUSD\n      timestamp\n      token0 {\n        symbol\n      }\n      token1 {\n        symbol\n      }\n    }\n  }\n`;\n\n// Define the query for token volume\nconst TOKEN_VOLUME_QUERY = gql`\n  {\n    tokens(first: 5, orderBy: volumeUSD, orderDirection: desc) {\n      id\n      symbol\n      volumeUSD\n    }\n  }\n`;\n\n// Define the query for top pairs\nconst TOP_PAIRS_QUERY = gql`\n  {\n    pools(first: 5, orderBy: volumeUSD, orderDirection: desc) {\n      id\n      token0 {\n        symbol\n      }\n      token1 {\n        symbol\n      }\n      volumeUSD\n    }\n  }\n`;\n\nfunction Swaps() {\n  const { loading, error, data } = useQuery(SWAP_QUERY);\n\n  if (loading) return <CircularProgress />;\n  if (error) {\n    console.error('Error fetching data:', error);\n    return <Typography color=\"error\">Error: {error.message}</Typography>;\n  }\n\n  // Prepare data for aggregation\n  const swaps = data.swaps;\n\n  // Aggregate every 100 swaps\n  const aggregateData = [];\n  for (let i = 0; i < swaps.length; i += 100) {\n    const chunk = swaps.slice(i, i + 100);\n    const totalAmountUSD = chunk.reduce((sum, swap) => sum + parseFloat(swap.amountUSD), 0);\n    const startTime = new Date(parseInt(chunk[0].timestamp) * 1000);\n    const endTime = new Date(parseInt(chunk[chunk.length - 1].timestamp) * 1000);\n\n    aggregateData.push({\n      x: startTime,\n      y: totalAmountUSD,\n      label: `${startTime.toLocaleString()} - ${endTime.toLocaleString()}`\n    });\n  }\n\n  // Prepare aggregated data for chart\n  const chartData = {\n    datasets: [\n      {\n        label: 'Amount USD (Aggregated Every 100 Swaps)',\n        data: aggregateData,\n        borderColor: 'rgba(75,192,192,1)',\n        backgroundColor: 'rgba(75,192,192,0.2)',\n        fill: true,\n      },\n    ],\n  };\n\n  // Chart options to format time and display a proper range\n  const chartOptions = {\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'minute',\n          tooltipFormat: 'Pp',\n          displayFormats: {\n            minute: 'HH:mm',\n            hour: 'HH:mm',\n            day: 'MMM D'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time',\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Amount USD',\n        },\n        beginAtZero: true\n      },\n    },\n  };\n\n  // Limit to the 5 latest swaps\n  const latestSwaps = swaps.slice(0, 5).map(swap => ({\n    ...swap,\n    timestamp: new Date(parseInt(swap.timestamp) * 1000).toLocaleString()\n  }));\n\n  return (\n    <Container>\n      <Typography variant=\"h4\" gutterBottom>\n        Recent Swaps\n      </Typography>\n      <Stack spacing={3}>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\">Swap Amounts Aggregated Every 100 Swaps</Typography>\n            <Line data={chartData} options={chartOptions} />\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\">Recent Swap Details</Typography>\n            {latestSwaps.map((swap) => (\n              <Card key={swap.id} sx={{ marginBottom: 2 }}>\n                <CardContent>\n                  <Typography variant=\"body1\">\n                    {swap.token0.symbol}/{swap.token1.symbol}: {swap.amountUSD} USD\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Timestamp: {swap.timestamp}\n                  </Typography>\n                </CardContent>\n              </Card>\n            ))}\n          </CardContent>\n        </Card>\n      </Stack>\n    </Container>\n  );\n}\n\nfunction TokenVolume() {\n  const { loading, error, data } = useQuery(TOKEN_VOLUME_QUERY);\n\n  if (loading) return <CircularProgress />;\n  if (error) {\n    console.error('Error fetching data:', error);\n    return <Typography color=\"error\">Error: {error.message}</Typography>;\n  }\n\n  // Prepare data for chart\n  const tokens = data.tokens;\n  const chartData = {\n    labels: tokens.map(token => token.symbol),\n    datasets: [\n      {\n        label: 'Volume USD',\n        data: tokens.map(token => parseFloat(token.volumeUSD)),\n        backgroundColor: 'rgba(153,102,255,0.2)',\n        borderColor: 'rgba(153,102,255,1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  // Chart options\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Volume USD',\n        },\n      },\n    },\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\">Top 5 Tokens by Volume</Typography>\n        <Bar data={chartData} options={chartOptions} />\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction TopPairs() {\n  const { loading, error, data } = useQuery(TOP_PAIRS_QUERY);\n\n  if (loading) return <CircularProgress />;\n  if (error) {\n    console.error('Error fetching data:', error);\n    return <Typography color=\"error\">Error: {error.message}</Typography>;\n  }\n\n  // Prepare data for chart\n  const pairs = data.pools;\n  const chartData = {\n    labels: pairs.map(pair => `${pair.token0.symbol}/${pair.token1.symbol}`),\n    datasets: [\n      {\n        label: 'Volume USD',\n        data: pairs.map(pair => parseFloat(pair.volumeUSD)),\n        backgroundColor: 'rgba(255,159,64,0.2)',\n        borderColor: 'rgba(255,159,64,1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  // Chart options\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Volume USD',\n        },\n      },\n    },\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\">Top 5 Pairs by Volume</Typography>\n        <Bar data={chartData} options={chartOptions} />\n      </CardContent>\n    </Card>\n  );\n}\n\n\nfunction App() {\n  return (\n    <Container>\n      <Stack spacing={4}>\n        <Swaps />\n        <TokenVolume />\n        <TopPairs />\n      </Stack>\n    </Container>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}